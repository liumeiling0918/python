1. 视图（接收请求返回响应那部分）
		1. CBV(class base view)和FBV(function base view)
	                views中CBV的类需要继承View,urls中需要调用as_view()方法
		2. request对象
			1. 之前学过的
				1. request.method    --> 获取请求的方法（GET、POST等）
				2. request.GET       --> 通常用来获取URL里面的参数  
				例如：127.0.0.1:8000/edit_book/?id=1&name=yimi
				request.GET --> {"id":1, "name":"yimi"}
				request.GET.get("id") 1
				3. request.POST      --> 用来获取POST提交过来的数据
					request.POST.get("book_name") 
			2. 补充其他常用的：
				1. request.path_info   --> 获取用户请求的路径(不包含IP地址，端口号和URL参数)
				例如127.0.0.1:8000/edit_book/?id=1&name=yimi 的request.path_info为edit_book
				2. request.body     返回的是字节形式
				3.request.FILES["upload_file"]用于上传文件时使用
				 request.FILES["upload_file"].name获取上传文件的文件名
				 request.FILES["upload_file"].chunks() 打开上传的文件
	
		3. response
			基础必备三件套(求学要严谨)
			1. HttpResponse        --> 返回字符串内容  return HttpResponse("上传成功")
			2. render              --> 返回一个html页面    return render(request, "publisher_list2.html", {"publisher_list": ret})         
			3. redirect            --> 返回一个重定向（告诉浏览器再去访问另外的网址）return redirect("/publisher_list/")
			
			4. JsonResponse --->返回序列化后的内容
			# 默认只能传递字典类型，如果要传递非字典类型需要设置一下safe关键字参数。return JsonResponse(data,safe=False)
			 safe=False 不做安全性的检测，则JsonResponse的序列化参数可以传入列表等类型

			
	2. 路由系统（urls.py）  http://www.cnblogs.com/liwenzhou/p/8271147.html
	URLconf 不检查请求的方法。换句话讲，所有的请求方法 —— 同一个URL的POST、GET、HEAD等等 —— 都将路由到相同的函数。
	例如，http://www.example.com/myapp/与http://www.example.com/myapp/?page=3 请求中，URLconf 都将路由到myapp/
	Django settings.py配置文件中默认没有 APPEND_SLASH 这个参数，但 Django 默认这个参数为 APPEND_SLASH = True。 其作用就是自动在网址结尾加'/'。

		1. 正则表达式的模糊匹配
		    使用分组的url正则相当于传递路由参数：
		   无命名的分组匹配        --> 相当于给视图函数传递位置参数
		   使用命名的分组匹配    --> 相当于给视图函数传递关键字参数
		
		2.项目中存在多个app时，使用URL的命名空间模式，使得多个app的url可以相同（通过命名空间namespace区分）


                                

			(两个不要混合使用)
			
---------------------------- 这里是坎 ------------------------------------
			
		4. 反向解析URL
			本质上就是给url匹配模式起别名，然后用过别名拿到具体的URL路径
			
			1. 怎么起别名?
				在url匹配模式中，定义name="别名"
				url(r'^json_test/', views.json_test, name="jsonTest"),  
				# 无命名分组：按位置传参(传递的参数一定是字符串类型)
    				url(r'^book1/([0-9]{2,4})/([a-zA-Z]){2}/$',views.book1, name="book1"),
   				 # 有命名的分组:按关键字传参(传递的参数一定是字符串类型)
    				url(r'^book2/(?P<year>[0-9]{2,4})/(?P<title>[a-zA-Z]){2}/$',views.book2, name="book2"),
				    url(r'^app01/',include(app01_urls,namespace="app01")),
    				# 以app01开头的地址映射到app01自己的url,例如# http://127.0.0.1:8000/app01/home/
    				url(r'^app02/',include(app02_urls,namespace="app02")),
    				# 以app02开头的地址映射到app02自己的url，例如# http://127.0.0.1:8000/app02/home/

			2. 如何使用？
				1. 在模板语言里面使用：
				{% url "别名" %}  --> 得到具体的URL路径
				{## 反向解析无参数时#}
				<p>反向解析无参数时：<a href="{% url 'jsonTest' %}">点我</a></p>
				{##}
				{#反向解析按位置传参时#}
				{#<p>反向解析按位置传参时：<a href="{% url 'book1' 2019 'sn' %}">点我</a></p>#}
				{##}
				{# #反向解析按关键字传参时#}
				{#<p>反向解析按关键字传参时：<a href="{% url 'book2' year=2019 title='sn' %}">点我</a></p>#}

				{#  #含有namespace的反向解析#}
				<p>含有namespace的反向解析：<a href="{% url 'app01:home'  %}">点我</a></p>
				<p>含有namespace的反向解析：<a href="{% url 'app02:home' %}">点我</a></p>
				2. 在视图中如何使用：
					from django.urls import reverse
					reverse("别名")  --> 得到具体的URL路径
					#含有namespace的反向解析
  					redirect_url3=reverse("app01:home")
					  redirect_url4=reverse("app02:home")
 					 # 反向解析无参数时
  					redirect_url = reverse("jsonTest")
 					 # # # #反向解析按位置传参时
  					# redirect_url1=reverse("book1", args=(2019,'sb'))
  					# # # #反向解析按关键字传参时
 					 # redirect_url2=reverse("book2",kwargs={'year':2019,'title':'sb'})

			3. 如何传参数？
				1. 模板语言中：
					{% url "别名" 2018 "nb" %}
				2. 视图函数中
					传位置参数：
						reverse("别名", args=(2018, "nb"))
				
					传关键字参数：
						reverse("别名" kwargs={"year": 2018, "title": "nb"})
			4. namespace
				为了防止不同的app下面的url匹配模式有重复的别名
