1.models中的创建表语句
from django.db import models

# ORM相关的只能写在这个文件里,写到别的文件里Django找不到

class UserInfo(models.Model):
    id = models.AutoField(primary_key=True)  # 创建一个自增的主键字段
    name = models.CharField(null=False, max_length=32)   # 创建一个varchar(20)类型的不能为空的字段

    def __str__(self):
        return "<{}-{}>".format(self.id, self.name)


# Book表
class Book(models.Model):
    id = models.AutoField(primary_key=True)  # 创建一个自增的主键字段
    title = models.CharField(max_length=64, null=False)
    
   2.操作数据库
   查询 models.UserInfo.objects.all()
   插入models.UserInfo.objects.create(name=new_name)
   删除models.Publisher.objects.get(id=del_id).delete()
   编辑models.Publisher.objects.get(id=edit_id).name = new_name
       edit_publisher.save()
        
   
   2.1# 展示所有的用户的函数
      def user_list(request):
          # 去数据库中查询所有的用户
          # 利用ORM这个工具去查询数据库,不用自己去查询
          ret = models.UserInfo.objects.all()  # [UserInfo Object, UserInfo Object]
          print(ret[0].id, ret[0].name)
          # 打开user_list.html文件,
          return render(request, "user_list.html", {"user_list": ret})

        
    2.2# 添加用户的函数
        def add_user(request):
            if request.method == "POST":
                # 用户填写了新的用户名,并发送了POST请求过来
                new_name = request.POST.get("username", None)
                # 去数据库中新创建一条用户记录
                models.UserInfo.objects.create(name=new_name)
                # return HttpResponse("添加成功!")
                # 添加成功后直接跳转到用户列表页
                return redirect("/user_list/")
            # 第一个请求页面的时候,就返回一个页面,页面上有两个框让用户填写
            return render(request, "add_user.html")
            
    2.3# 删除出版社的函数
            def delete_publisher(request):
                print(request.GET)
                print("=" * 120)
                # 删除指定的数据
                # 1. 从GET请求的参数里面拿到将要删除的数据的ID值
                del_id = request.GET.get("id", None)  # 字典取值,娶不到默认为None
                # 如果能取到id值
                if del_id:
                    # 去数据库删除当前id值的数据
                    # 根据id值查找到数据
                    del_obj = models.Publisher.objects.get(id=del_id)
                    # 删除
                    del_obj.delete()
                    # 返回删除后的页面,跳转到出版社的列表页,查看删除是否成功
                    return redirect("/publisher_list/")
                else:
                    return HttpResponse("要删除的数据不存在!")
    2.4# 编辑出版社
        def edit_publisher(request):
        # 用户修改完出版社的名字,点击提交按钮,给我发来新的出版社名字
        if request.method == "POST":
            print(request.POST)
            # 取新出版社名字
            edit_id = request.POST.get("id")
            new_name = request.POST.get("publisher_name")
            # 更新出版社
            # 根据id取到编辑的是哪个出版社
            edit_publisher = models.Publisher.objects.get(id=edit_id)
            edit_publisher.name = new_name
            edit_publisher.save()  # 把修改提交到数据库
            # 跳转出版社列表页,查看是否修改成功
            return redirect("/publisher_list/")
        # 从GET请求的URL中取到id参数
        edit_id = request.GET.get("id")
        if edit_id:
            # 获取到当前编辑的出版社对象
            publisher_obj = models.Publisher.objects.get(id=edit_id)
            return render(request, "edit_publisher.html", {"publisher": publisher_obj})
        else:
            return HttpResponse("编辑的出版社不存在!")
            
            
   3.对publisher表进行展示在表格中：
   urls配置：
     url(r'add_publisher/',views.add_publisher),
    url(r'^publisher_list/',views.publisher_list),
    url(r'^edit_publisher/',views.edit_publisher),
    url(r'^delete_publisher/',views.delete_publisher),
    
   publisher.html代码:
        <table class="table table-bordered">
        <thead>
        <tr>

            <th>id</th>
            <th>出版社名称</th>
            <th>操作</th>
        </tr>
        </thead>
        <tbody>
        {% for publisher in publisher_list %}
            <tr>
                <td>{{ publisher.id }}</td>
                <td>{{ publisher.name }}</td>
                <td>{{ publisher.addr }}</td>
                <td>
                    <a class="btn btn-danger" href="/delete_publisher/?id={{ publisher.id }}">删除</a>
                    <a class="btn btn-info" href="/edit_publisher/?id={{ publisher.id }}">编辑</a>
                </td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
    <a href="/add_publisher/">新增</a>
    
   views.publisher_list中的代码：
           def publisher_list(request):
            publishers=models.Publisher.objects.all()
            return render(request,"publisher_list.html",{"publisher_list":publishers})
   views.edit_publisher中的代码：
       def edit_publisher(request):
        if request.method=="GET":
            publisher_id=request.GET.get("id")
            if publisher_id:
                publisher_obj=models.Publisher.objects.get(id=publisher_id)
                return render(request,"edit_publisher.html",{"publisher":publisher_obj})
            else:
                return HttpResponse("编辑的出版社不存在")
        else:
            #post方法
            new_name=request.POST.get("publisher_name",None)
            new_addr=request.POST.get("publisher_addr",None)
            edit_id=request.POST.get("id",None)
            print(new_name)
            print(new_addr)
            print(edit_id)
            publisher_obj=models.Publisher.objects.get(id=edit_id)
            publisher_obj.name=new_name
            publisher_obj.addr=new_addr
            publisher_obj.save()
            return redirect("/publisher_list/")
            
 4.多表联合
   表格结构：
   from django.db import models
    class Publisher(models.Model):
        id=models.AutoField(primary_key=True)
        name=models.CharField(max_length=64,null=False,unique=True)
        addr=models.CharField(max_length=128)

    class Book(models.Model):
        id=models.AutoField(primary_key=True)
        title=models.CharField(max_length=64,null=False,unique=True)
        publisher=models.ForeignKey(to="Publisher")
        Book 表格含有三个字段：id title publisher_id
        
        urls配置：
        url(r'^add_book/',views.add_book),
        url(r'^book_list/',views.book_list),
        url(r'^edit_book/',views.edit_book),
        url(r'^delete_book/',views.delete_book)
        
        bool_list.html在表格中展示：
         <table class="table table-bordered">
        <thead>
        <tr>
            <th>id</th>
            <th>书名</th>
            <th>出版社</th>
            <th>操作</th>
        </tr>
        </thead>
        <tbody>
        {% for book in book_list %}
            <tr>
                <td>{{ book.id }}</td>
                <td>{{ book.title }}</td>
                <td>{{ book.publisher.name }}</td>
                <td>
                    <a href="/edit_book/?id={{ book.id }}">编辑</a>
                    <a href="/delete_book/?id={{ book.id }}">删除</a>
                </td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
    add_book.html:
    <form action="/add_book/" method="post">
        <p>
            书名：<input type="text" name="book_title">
        </p>
        <p>出版社
            <select name="publisher">
                {% for publisher in publisher_list %}
                <option value="{{ publisher.id }}">{{ publisher.name }}</option>
                {% endfor %}
            </select>
        </p>
    <p>
        <input type="submit" value="提交">
    </p>
    </form>
多表联合的增删改查代码:
def add_book(request):
    if request.method=="POST":
        title=request.POST.get("book_title",None)
        publisher_id=request.POST.get("publisher",None)
        models.Book.objects.create(title=title,publisher_id=publisher_id)
        #需要修改
        return redirect("/book_list/")
    publishers=models.Publisher.objects.all()
    return render(request,"add_book.html",{"publisher_list":publishers})

def book_list(request):
    books=models.Book.objects.all()
    return render(request,"book_list.html",{"book_list":books})

def edit_book(request):
    if request.method=="GET":
        id=request.GET.get("id")
        book_obj=models.Book.objects.get(id=id)
        return render(request,"edit_book.html",{"book":book_obj})
    else:
        #post方法
        id=request.POST.get("id",None)
        title=request.POST.get("book_title",None)
        publisher_name=request.POST.get("publisher_name",None)
        publisher=models.Publisher.objects.get(name=publisher_name)
        book=models.Book.objects.get(id=id)
        book.title=title
        book.publisher_id=publisher.id
        book.save()
        return redirect("/book_list/")

def delete_book(request):
    if request.method=="GET":
        id=request.GET.get("id")
        book=models.Book.objects.get(id=id)
        book.delete()
        return redirect("/book_list/")
    
    
        
    
            
   
   
