1.闭包：内部函数使用外部函数的变量
def outter():
  a=3
  def inner():
    print(a)
  return inner
  调用方式：i=outer()
            i()
 2.装饰器:
def timmer(f):    #装饰器函数
    def inner(*args,**kwargs):
        start = time.time()
        ret = f(*args,**kwargs)       #被装饰的函数
        end = time.time()
        print(end - start)
        return ret
    return inner

@timmer         #语法糖 @装饰器函数名
def func():     #被装饰的函数
    time.sleep(0.01)
    print('老板好同事好大家好')
    return '新年好'
    相当于：
func = timmer(func)
func()   #inner()

3.
# def wahaha():
#     '''
#     一个打印娃哈哈的函数
#     :return:
#     '''
#     print('娃哈哈')

# print(wahaha.__name__) #查看字符串格式的函数名
# print(wahaha.__doc__)  #document中的注释内容
        1.在inner上添加@wraps(func)
        from functools import wraps
        def wrapper(func):  #func = holiday
            @wraps(func)
            def inner(*args,**kwargs):
                print('在被装饰的函数执行之前做的事')
                ret = func(*args,**kwargs)
                print('在被装饰的函数执行之后做的事')
                return ret
            return inner

        @wrapper   #holiday = wrapper(holiday)
        def holiday(day):
            '''这是一个放假通知'''
            print('全体放假%s天'%day)
            return '好开心'

        print(holiday.__name__) 结果为inner
        2.在inner上未添加@wraps(func)
        print(holiday.__doc__)则被装饰函数中的注释可以被打印出 这是一个放假通知
4.#可根据业务要求动态的决定是否装饰函数
      import time
      def timer_out(FLAG):
          def timer(func):
              def inner(*args,**kargs):
                  if FLAG:
                      start=time.time()
                      ret=func(*args,**kargs)
                      end=time.time()
                      t=end-start
                      print('time is'+str(t))
                      return ret
                  else:
                      ret = func(*args, **kargs)
                      return ret
              return inner
          return timer

      FLAG=True
      @timer_out(FLAG)
      def f():
          time.sleep(1)
          print('this is f')
          return 'ok'

      FLAG=False
      @timer_out(FLAG)
      def f1():
          time.sleep(1)
          return 'Yes'

      #f函数被装饰，f1函数没有被装饰
      print(f())
      print(f1())

5.#多个装饰器装饰一个函数
      def wrapper1(func):
          def inner1():
              print('wrapper1 ,before func')
              ret = func()
              print('wrapper1 ,after func')
              return ret
          return inner1

      def wrapper2(func):
          def inner2():
              print('wrapper2 ,before func')
              ret = func()
              print('wrapper2 ,after func')
              return ret
          return inner2

      def wrapper3(func):
          def inner3():
              print('wrapper3 ,before func')
              ret = func()
              print('wrapper3 ,after func')
              return ret
          return inner3

      @wrapper3
      @wrapper2
      @wrapper1
      def f():
          print('in f')
          return '哈哈哈'

      print(f())
结果：
    wrapper3 ,before func
    wrapper2 ,before func
    wrapper1 ,before func
    in f
    wrapper1 ,after func
    wrapper2 ,after func
    wrapper3 ,after func
  6.三层装饰器
  装饰器的最外面一层传递符号变量
  def outter(flag):
    def timer(func):
        def inner(*args,**kargs):
            if flag:
                print("before")
                ret=func(*args,**kargs)
                print('end')
                return ret
            else:
                ret=func(*args,**kargs)
                return ret
        return inner
    return timer

@outter(True)
def func(a,b):
    print(a)
    print(b)

print(func(2,3))

  
