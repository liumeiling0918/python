1.可迭代协议与迭代器协议
# 只要含有__iter__方法的都是可迭代的 —— 可迭代协议
# 迭代器协议 —— 内部含有__next__和__iter__方法的就是迭代器
# 迭代器协议和可迭代协议
# 可以被for循环的都是可迭代的
# 可迭代的内部都有__iter__方法
# 只要是迭代器 一定可迭代
# 可迭代的.__iter__()方法就可以得到一个迭代器
# 迭代器中的__next__()方法可以一个一个的获取值
2.#迭代器的好处：
    # 从容器类型中一个一个的取值，会把所有的值都取到。
    # 节省内存空间
        #迭代器并不会在内存中再占用一大块内存，
            # 而是随着循环 每次生成一个
            # 每次next每次给我一个
3.生成器
# 生成器 —— 迭代器
# 生成器函数 —— 本质上就是我们自己写得函数
#只要含有yield关键字的函数都是生成器函数
# yield不能和return共用且需要写在函数内
# def generator():
#     print(1)
#     yield 'a'
# #生成器函数 ： 执行之后会得到一个生成器作为返回值
# ret = generator() generator()是生成器函数 ret是生成器
# print(ret)
4.生成器中含有多个yield函数
# def generator():
#     print(1)
#     yield 'a'
#     print(2)
#     print(3)
#     yield 'b'
#     yield 'c'
# g = generator()
# # for i in g:
# #     print(i)
# ret = g.__next__()
# print(ret)
# ret = g.__next__()
# print(ret)
# ret = g.__next__()
# print(ret)
_next_（）方法每遇到一个yield就返回
5.使用生成器
def wahaha():
    for i in range(200):
        yield '娃哈哈%s'%i
 g=wahaha()       
# for i in g:
#     print(i)
结果为 从娃哈哈0 打印到 娃哈哈199
当执行到‘娃哈哈2’时，‘娃哈哈1’已经不在内存中
随着循环，每次生成一个
4.对于send的用法：
        send用于给上一个yield传值，并返回下一个yield的结果
        记住：调用生成器时，第一个yield不能用send获取值，只能用g.__next__()
              生成器函数中，最后一个yield不能接受外部的值,即 num=yield XX 报错，只能yield xx
5.生成器表达式，列表表达式，字典表达式，集合表达式的格式
        #[每一个元素或者是和元素相关的操作 for 元素 in 可迭代数据类型]    #遍历之后挨个处理
        #[满足条件的元素相关的操作 for 元素 in 可迭代数据类型 if 元素相关的条件]   #筛选功能
        生成器推导式(i*i for i in range(30) if i%3 == 0)
        列表推导式[i*i for i in (1,2,3,4) if i%3 == 0]
        字典推导式# mcase = {'a': 10, 'b': 34}
                # mcase_frequency = {mcase[k]: k for k in mcase}
        集合推导式，自带结果去重功能{x**2 for x in [1, -1, 2]}
