1.locals()返回所有的本地作用域的变量名称
  globals()返回所有的全局作用域的变量名称
  
2.global 修饰全局变量
# nonlocal 变量 :这是一个函数里面再嵌套了一个函数。当使用 nonlocal 时，就声明了该变量不只在嵌套函数inner（）里面才有效， 而是在整个大函数里面都有效

3.# 迭代器 = iter(可迭代的) 等同于  迭代器 = 可迭代的.__iter__()
 #迭代器.__next__()  等同于  next(迭代器)

4.dir(数据类型或变量) 查看其拥有的内置方法

5.callable() 是否是可调用的方法
 
6.import time等同于__import__('time')

7.writable()是否可写  
  readable() 是否可读
 
8.hash()求可哈希对象的地址
  不变数据类型都是可哈希的。元祖，字符串，基本数据类型可哈希。列表，字典，集合不可哈希
  #hash - 对于相同的可hash数据的hash值在一次程序的执行过程中总是不变的
  # 例如 print(hash('abc'))与print(hash('abc'))均相同
  # 字典的寻址方式  key对应的hash值就是value的内存的地址
  
 9.id(对象) 返回对象的地址
   type(对象)返回对象的数据类型
   
 10.print()
     重定向输出流: 例如输出到文件中
     # f = open('file','w')
     # print('aaaa',file=f)
     # f.close()
     指定输出的结束符， 若不指定end则默认为回车
     print('我们的祖国是花园',end='')  #指定输出的结束符
      print('我们的祖国是花园',end='')
      # 若不指定end则默认为回车
      print('我们的祖国是花园')
      print('我们的祖国是花园')
      #指定输出多个值之间的分隔符
      print(1,2,3,4,5,sep='|') 
      是否需要缓存
      print（s,flush=True）不做缓存，立即把内容输出到流文件中，有一个输出一个
      print(s,flush=False)放入缓存中，累积一堆再取
      例如进度条程序：
      import time
      def process():
          for i in range(0,101,2):
              time.sleep(0.1)
              ret='\r %s%%:%s'%(i,i//2*'*') if i!=100 else '\r %s%%:%s 成功啦\n'%(i,i//2*'*')
              print(ret,end='',flush=True)
          其中字符串中的'\r'表示从行首开始
          i//2表示对商取整，向下取整 为int型 -9//2=-5  9//2=4
    11.# exec和eval都可以执行 字符串类型的代码
      # eval有返回值  —— 有结果的简单计算
      # exec没有返回值   —— 简单流程控制
      # eval只能用在你明确知道你要执行的代码是什么
      # exec('print(123)')
      # eval('print(123)')
      # print(eval('1+2+3+4'))   # 有返回值
      # print(exec('1+2+3+4'))   #没有返回值
      
      # code = '''for i in range(10):
      #     print(i*'*')
      # '''
      # exec(code)
      
   12.compile()编译
    # code1 = 'for i in range(0,10): print (i)'
    # compile1 = compile(code1,'','exec')
    # exec(compile1)

    # code2 = '1 + 2 + 3 + 4'
    # compile2 = compile(code2,'','eval')
    # print(eval(compile2))

    # code3 = 'name = input("please input your name:")'
    # compile3 = compile(code3,'','single')
    # exec(compile3) #执行时显示交互命令，提示输入
    # print(name)
    12.关于数：
          bin()转化成二进制
          oct()转化成八进制
          hex()转化成十六进制
          abs()绝对值
          divmod(7,2)   # div除法 mod取余 除余
          pow(a,b)幂运算
          pow(a,b,c)幂运算后取余
          sum(列表，start) 从start开始加
          min()取最小值
          max()取最大值
 13.bytes() 与bytearray()
        bytes('你好'，encoding='utf-8')  b'\xe4\xbd\xa0\xe5\xa5\xbd' 以一个整体在内存中存放
        ba=bytearray('你好',encoding='utf-8') bytearray(b'\xe4\xbd\xa0\xe5\xa5\xbd') 
        ba[0]为\xe4 编码的每个部分在内存中分开存放 可以对其中任意一个进行修改
14.chr(number),unichr(number),ord(str)
          chr(number)将数字以ACSii形式转译
          unichar(number)将数字以unicode形式转译
          ord(str)将字符串按照对应的ACSii形式或者unicode形式进行转换成数字
          chr(65) ‘A’
          unichr(12345) u'\u3039'
          ord('a') 97
          ord(u'\u3039') 12345
15.repr()按照原型显示
           print('1')   1
           # print(repr('1')) '1'
          # print(repr(1))  1
          # name = 'egg'
          # print('你好%s'%name)  你好egg
          # print('你好%r'%name)  你好'egg'
          %r内部调用了repr
 16.reversed(可迭代参数) 返回一个迭代器
                  # l = [1,2,3,4,5]
                  # l2 = reversed(l)
                  # 保留原列表，返回一个反向的迭代器
                  l.reverse() 在原列表的基础上进行修改
   format() 格式化
                # print(format('test', '<20')) 一共20个字符的空间 向左对齐
                # print(format('test', '>40'))  向右对齐
                # print(format('test', '^40'))  居中对齐
   all(可迭代) 可迭代中的所有元素为True才为True
   any(可迭代) 可迭代中的任意一个元素为True则为True
               # print(all(['a','',123])) False
                # print(all(['a',123]))  True
                # print(any(['',True,0,[]])) True

 17.zip(可迭代1，可迭代2，，，)将可迭代参数中的内容按照拉链式的方法压缩成一个迭代器返回
                  # l = [1,2,3,4,5]
                  # l2 = ['a','b','c','d']
                  # l3 = ('*','**',[1,2])
                  # d = {'k1':1,'k2':2,'k3':3}
                  # for i in zip(l,l2):
                  #     print(i)
                  # 结果为：
                  # (1, 'a')
                  # (2, 'b')
                  # (3, 'c')
                  # (4, 'd')

                  # for i in zip(l,l2,l3):
                  #     print(i)
                  # 结果为：
                  # (1, 'a', '*')
                  # (2, 'b', '**')
                  # (3, 'c', [1, 2])

                  # for i in zip(l,l2,l3,d):
                  #     print(i)
                  # 结果为：
                  # (1, 'a', '*', 'k1')
                  # (2, 'b', '**', 'k2')
                  # (3, 'c', [1, 2], 'k3')
 
 
 18.带有可迭代参数的函数：
 filter(函数,可迭代参数)
 map(函数,可迭代参数)
 sorted(可迭代参数，key=函数，reversed=True/False)
 max(可迭代参数，key=函数)
 min(可迭代参数，key=函数)
 filter(函数,可迭代参数)结果返回迭代器
             将可迭代的参数中的每个元素放入函数中运行，若函数的运行结果为True,则该元素为迭代器的成员之一。
             例如# def is_odd(x):
            #     return x % 2 == 1
            # ret = filter(is_odd, [1, 4, 6, 7, 9, 12, 17])  返回的是迭代器
            # 以上语句等价于[i for i in [1, 4, 6, 7, 9, 12, 17] if i % 2 == 1]
 map(函数,可迭代参数) 结果返回迭代器
            将可迭代的参数中的每个元素放入函数中运行，并将函数的运行结果放入迭代器中。
            ret = map(abs,[1,-4,6,-8])
          # 以上语句等价于[for i in [abs(i) for i in [1,-4,6,-8]]
            for i in ret:
              print(i)
        # filter 执行了filter之后的结果集合 <= 执行之前的个数
                #filter只管筛选，不会改变原来的值
        # map 执行前后元素个数不变
              # 值可能发生改变
              
 sorted(可迭代参数，key=函数，reversed=True/False)
 sort(key=函数)
 # sort是在原列表的基础上进行排序，sorted生成了一个新列表
       例子：  # l = [1,-4,6,5,-10]
              # # l.sort(key = abs)   # 在原列表的基础上进行排序
              # print(sorted(l,key=abs,reverse=True))      # 生成了一个新列表 不改变原列表 占内存
              # reverse=True从小到大排序，reverse=False从大到小进行排序
      例子：# l = ['   ',[1,2],'hello world']
             # new_l = sorted(l,key=len)
    
 max(可迭代参数，key=函数)
       例子1：max([1,2,3,4,5,-6,-7],key=abs)
       例子2：若可迭代参数是一个字典类型，那么传入函数的参数是字典的key
            dic={'k1':10,'k2':100,'k3':30}
          # print(max(dic,key=lambda key:dic[key]))
          
 min(可迭代参数，key=函数)
 
 19.匿名函数  lambda 参数：返回值
       例子1：# add = lambda x,y:x+y
             # print(add(1,2))
       例子2：# ret = map(lambda x:x**2,[-1,2,-3,4])
             # for i in ret:
            #     print(i)
       

 
 
  
