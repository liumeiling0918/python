
# logging
# 有5种级别的日志记录模式 ：CRITICAL>ERROR>WARNING>INFO>DEBUG
        # logging.debug('debug message')       # 低级别的 # 排错信息
        # logging.info('info message')            # 正常信息
        # logging.warning('warning message')      # 警告信息
        # logging.error('error message')          # 错误信息
        # logging.critical('critical message') # 高级别的 # 严重错误信息

        # 日志级别 CRITICAL>ERROR>WARNING>INFO>DEBUG
        # 两种配置方式：basicconfig 、log对象

import logging
logging.DEBUG

# basicconfig 简单 但是能做的事情相对少
    # 不能解决中文的乱码问题
    # 不能同时往文件和屏幕上输出
# logging.basicConfig(level=logging.WARNING,
#                     format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
#                     datefmt='%a, %d %b %Y %H:%M:%S',
#                       filename='test.log',
#                       filemode='w')
# #level=logging.WARNING  # WARNING 以上的都输出
# # print('%(key)s'%{'key':'value'}) 类似于format 处理key：value形式的填充
# # print('%s'%('key','value'))
# try:
#     int(input('num >>'))
# except ValueError:
#     logging.error('输入的值不是一个数字')

# logging.basicConfig()函数中可通过具体参数来更改logging模块默认行为，可用参数有：
#
# filename：用指定的文件名创建FiledHandler，这样日志会被存储在指定的文件中。
# filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。
# format：指定handler使用的日志显示格式。
# datefmt：指定日期时间格式。
# level：设置rootlogger（后边会讲解具体概念）的日志级别
# stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件(f=open(‘test.log’,’w’))，默认为sys.stderr。
# 若同时列出了filename和stream两个参数，则stream参数会被忽略。
#
# format参数中可能用到的格式化串：
# %(name)s Logger的名字
# %(levelno)s 数字形式的日志级别
# %(levelname)s 文本形式的日志级别
# %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有
# %(filename)s 调用日志输出函数的模块的文件名
# %(module)s 调用日志输出函数的模块名
# %(funcName)s 调用日志输出函数的函数名
# %(lineno)d 调用日志输出函数的语句所在的代码行
# %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示
# %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数
# %(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒
# %(thread)d 线程ID。可能没有
# %(threadName)s 线程名。可能没有
# %(process)d 进程ID。可能没有
# %(message)s用户输出的消息




# 配置log对象 稍微有点复杂 能做的事情相对多
import logging
logger = logging.getLogger() #创建对象
fh = logging.FileHandler('text.log',encoding='utf-8') #文件操作符
sh = logging.StreamHandler()    # 创建一个屏幕控制对象 即屏幕操作符
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
formatter2 = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s [line:%(lineno)d] : %(message)s')
# 文件操作符 和 格式关联
fh.setFormatter(formatter)
sh.setFormatter(formatter2)
fh.setLevel(logging.DEBUG)
# logger 对象 和 文件操作符，屏幕操作符 关联
logger.addHandler(fh)
logger.addHandler(sh)
logging.debug('debug message')       # 低级别的 # 排错信息
logging.info('info message')            # 正常信息
logging.warning('警告错误')      # 警告信息
logging.error('error message')          # 错误信息
logging.critical('critical message') # 高级别的 # 严重错误信息

# zabbix 监控当前机器的情况，出问题时可以发邮件








