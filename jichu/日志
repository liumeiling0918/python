
# logging
# 有5种级别的日志记录模式 ：CRITICAL>ERROR>WARNING>INFO>DEBUG
        # logging.debug('debug message')       # 低级别的 # 排错信息
        # logging.info('info message')            # 正常信息
        # logging.warning('warning message')      # 警告信息
        # logging.error('error message')          # 错误信息
        # logging.critical('critical message') # 高级别的 # 严重错误信息

        # 日志级别 CRITICAL>ERROR>WARNING>INFO>DEBUG
        # 两种配置方式：basicconfig 、log对象

import logging
logging.DEBUG

# basicconfig 简单 但是能做的事情相对少
    # 不能解决中文的乱码问题
    # 不能同时往文件和屏幕上输出
# logging.basicConfig(level=logging.WARNING,
#                     format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
#                     datefmt='%a, %d %b %Y %H:%M:%S',
#                       filename='test.log',
#                       filemode='w')
# #level=logging.WARNING  # WARNING 以上的都输出
# # print('%(key)s'%{'key':'value'}) 类似于format 处理key：value形式的填充
# # print('%s'%('key','value'))
# try:
#     int(input('num >>'))
# except ValueError:
#     logging.error('输入的值不是一个数字')

# logging.basicConfig()函数中可通过具体参数来更改logging模块默认行为，
 import logging
DATEFMT ="[%Y-%m-%d %H:%M:%S]"
FORMAT = "%(asctime)s %(thread)d %(message)s"
logging.basicConfig(level=logging.INFO,format=FORMAT,datefmt=DATEFMT,filename='class_test.log')

# 配置log对象 稍微有点复杂 能做的事情相对多
import logging
logger = logging.getLogger() #创建对象
使用工厂方法返回一个Logger实例。
logging.getLogger([name=None])
 指定name，返回一个名称为name的Logger实例。如果再次使用相同的名字，是实例化一个对象。未指定name，返回Logger实例，名称是root，即根Logger。

 
root = logging.getLogger()
print(root.name,type(root),root.parent,id(root))
 
logger = logging.getLogger(__name__)
print(logger.name, type(logger), id(logger), id((logger.parent)))
 
logger1 = logging.getLogger(__name__ + ".ok")
print(logger1.name, type(logger1), id(logger1), id((logger1.parent)))
 
print(logger1.parent,id(logger1.parent))
 
运行结果：
        root <class 'logging.RootLogger'> None 4367575248
        __main__ <class 'logging.Logger'> 4367575864 4367575248
        __main__.ok <class 'logging.Logger'> 4367575920 4367575864
        <logging.Logger object at 0x10453eb38> 4367575864



fh = logging.FileHandler('text.log',encoding='utf-8') #文件操作符
sh = logging.StreamHandler()    # 创建一个屏幕控制对象 即屏幕操作符
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
formatter2 = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s [line:%(lineno)d] : %(message)s')
# 文件操作符 和 格式关联
fh.setFormatter(formatter)
sh.setFormatter(formatter2)
fh.setLevel(logging.DEBUG)
# logger 对象 和 文件操作符，屏幕操作符 关联
logger.addHandler(fh)
logger.addHandler(sh)
logging.debug('debug message')       # 低级别的 # 排错信息
logging.info('info message')            # 正常信息
logging.warning('警告错误')      # 警告信息
logging.error('error message')          # 错误信息
logging.critical('critical message') # 高级别的 # 严重错误信息

# zabbix 监控当前机器的情况，出问题时可以发邮件








