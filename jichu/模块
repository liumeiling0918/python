# collection模块 python中的扩展数据类型
# random模块 随机数模块
# os模块 和操作系统打交道的模块
# sys模块 和python解释器打交道的模块
# 序列化模块 python中的数据类型和str转换的模块
1.re模块：
        findall,search,match,split,sub,subn,finditer
        import re
        # findall返回所有满足匹配条件的结果,放在列表里
        # search #函数会在字符串内查找模式匹配,只要找到第一个匹配然后返回一个包含匹配信息的对象,
        # 该对象可以通过调用group()方法得到匹配的字符串,如果字符串没有匹配，则返回None。
        # match是从头开始匹配，如果正则规则从头开始可以匹配上，就返回一个变量。
        # 匹配的内容需要用group才能显示;如果没匹配上，就返回None，调用group会报错

        # findall(正则，字符串)返回所有满足匹配条件的结果,放在列表里
        # ret = re.findall('[a-z]+', 'eva egon yuan')
        # print(ret) #结果['eva', 'egon', 'yuan']

        # 当正则中含有分组()时，findall会优先把匹配结果中的组里内容()返回,如果想要匹配结果,取消权限即可，使用?:取消
        # ret = re.findall('www.(baidu|oldboy).com', 'www.oldboy.com')
        # print(ret)  # ['oldboy']
        # 有()时，这是因为findall会优先把匹配结果中的组里内容(baidu|oldboy)返回,如果想要匹配结果,取消权限即可，使用?:取消
        # ret1 = re.findall('www.(baidu|oldboy).com', 'www1.oldboy.com')
        # print(ret1) #[]因为不匹配

        # search(正则，字符串) #函数会在字符串内查找模式匹配,只要找到第一个匹配然后返回一个包含匹配信息的对象,
        # ret = re.search('a', 'eva egon yuan')
        # print(ret)  结果为<_sre.SRE_Match object; span=(2, 3), match='a'>
        # if ret:
        #     print(ret.group()) 结果为a
        # 从前往后，找到一个就返回,返回的变量需要调用group才能拿到结果
        # 如果没有找到，那么返回None，调用group会报错

        # 含有分组功能的search()
        # import re
        # ret = re.search('^[1-9](\d{14})(\d{2}[0-9x])?$','110105199912122277')
        # print(ret.group()) #结果为110105199912122277
        # #取分组中的内容，第一组(\d{14}) 第二组(\d{2}[0-9x])
        # print(ret.group(1)) #结果为10105199912122
        # print(ret.group(2)) #结果为277

        # 我们可以使用?P<name>对分组进行命名，使用?P=name通过分组名使用该分组
        # ret = re.search("<(?P<tag_name>\w+)>\w+</(?P=tag_name)>","<h1>hello</h1>")
        # #可以在分组中利用(?P<tag_name>)的形式给分组起名字 (?P=tag_name)使用分组的名字 用于匹配成对出现的形式
        # ret = re.search("<(?P<tag_name>\w+)>\w+</(?P=tag_name)>","<h1>hello</h2>")
        # print(ret) 结果为None
        # #获取的匹配结果可以直接用group('名字')拿到对应的值
        # print(ret.group('tag_name'))   #结果 ：h1
        # print(ret.group())             #结果 ：<h1>hello</h1>


        # #如果不给组起名字，也可以用\序号来找到对应的组，表示要找的内容和前面的组内容一致
        # ret = re.search(r"<(\w+)>\w+</\1>","<h1>hello</h1>")
        # \1用于取第一组分组
        # #获取的匹配结果可以直接用group(序号)拿到对应的值
        # print(ret.group(1))
        # print(ret.group())  #结果 ：<h1>hello</h1>



        # match(正则，字符串) 是从头开始匹配，如果正则规则从头开始可以匹配上，就返回一个变量。
        # 匹配的内容需要用group才能显示;如果没匹配上，就返回None，调用group会报错
        # 与search的区别是：search只要匹配上就行，不需要必须从字符串的头部匹配
        # 例如ret = re.match('a', 'abc').group()
        #     print(ret)结果 : 'a'
        # 例如re.match(' [a-z]+', 'eva egon yuan') None('eva egon yuan'开头没有空格，所以返回None)
        #     re.search(' [a-z]+', 'eva egon yuan') 空格egon空格yuan

        # 含有分组功能的match()与含有分组功能的search（）类似
        # import re
        # ret = re.match('^[1-9](\d{14})(\d{2}[0-9x])?$','110105199912122277')
        # print(ret.group()) #结果为110105199912122277
        # #取分组中的内容，第一组(\d{14}) 第二组(\d{2}[0-9x])
        # print(ret.group(1)) #结果为10105199912122
        # print(ret.group(2)) #结果为277



        # split(正则,字符串) 是按照正则所匹配的规则对字符串进行分割
        # ret = re.split('[ab]', 'abcd')
        # # 先按'a'分割得到''和'bcd',在对''和'bcd'分别按'b'分割
        # print(ret)  # ['', '', 'cd']

        # 没有分组()时，不保留匹配的项
        # ret=re.split("\d+","eva3egon4yuan")
        # print(ret) #结果 ： ['eva', 'egon', 'yuan']
        # 有分组()时，保留了匹配的项
        # ret=re.split("(\d+)","eva3egon4yuan")
        # print(ret) #结果 ： ['eva', '3', 'egon', '4', 'yuan']

        # sub(正则，替换后的内容，字符串，替换次数)将字符串中匹配的内容替换，并限定替换次数。返回值为替换后的字符串
        # ret = re.sub('\d', 'H', 'eva3egon4yuan4',1)
        # # 将数字替换成'H'，参数1表示只替换1个
        # print(ret) #evaHegon4yuan4

        # subn(正则，替换后的内容，字符串)将字符串中匹配的内容替换。返回值为元祖，（替换后的字符串，替换次数）
        # ret = re.subn('\d', 'H', 'eva3egon4yuan4')
        #将数字替换成'H'，返回元组(替换的结果,替换了多少次)
        # print(ret) 结果('evaHegonHyuanH', 3)

        # compile(正则)将正则表达式编译成为一个 正则表达式对象，该对象含有的函数match,search,findall
        # obj = re.compile('\d{3}')
        # #将正则表达式编译成为一个 正则表达式对象，规则要匹配的是3个数字
        # ret = obj.search('abc123eeee') #正则表达式对象调用search，参数为待匹配的字符串
        # print(ret.group()) #结果为123
        # ret = obj.search('abcashgjgsdghkash456eeee3wr2') #正则表达式对象调用search，参数为待匹配的字符串
        # print(ret.group())  #结果 ：456

        #finditer返回一个存放匹配结果的迭代器,迭代器中的每个元素的内容需要用group查看
        # import re
        # ret = re.finditer('\d', 'ds3sy4784a')
        # print(ret)  # <callable_iterator object at 0x10195f940>
        # print(next(ret).group())  #查看第一个结果
        # print(next(ret).group())  #查看第二个结果
        # print([i.group() for i in ret])  #查看剩余的左右结果
        # for i in ret:
        #     print(i.group())
       
2.collections模块
        # namedtuple(元祖名称，[元祖内每个元素的名称]) 给元祖命名
        # 例如： # from collections import namedtuple
                # Point = namedtuple('point',['x','y','z'])
                # p1 = Point(1,2,3)
                # p2 = Point(3,2,1)
                # print(p1.x)
                # print(p1.y)
                # print(p1,p2)

        # 队列：
        # import queue
        # q = queue.Queue()
        # q.put([1,2,3]) #入队 def put(self, item, block=True, timeout=None) 不支持动态参数，不可以添加多个元素(*args)，
        可以添加多种数据类型,所以[1,2,3]是一个整体
        # q.put(4)
        # print(q.get())#出队[1, 2, 3]
        # print(q.get() ) 4

        # 双端队列在collections模块
        # from collections import deque
        # dq = deque([1,2])
        # dq.append('a')   # 从后面放数据  [1,2,'a'] append(self, *args, **kwargs)支持动态参数 所以[1,2,'a']在队列中是三个元素
        # dq.appendleft('b') # 从前面放数据 ['b',1,2,'a']
        # print(dq)
        # dq.insert(2,3)    #['b',1,3,2,'a']
        # print(dq.pop())      # 从后面取数据
        # print(dq.popleft())  # 从前面取数据
        # print(dq)

        # 对于字典有两种定义方式：
        # dic={'a':1,'b':2,'c':3}
        # print(dic['a'])
        # d=dict([('a',1),('b',2),('c',3)])
        # print(d['a'])
        # 以上两种定义方式等同

        #有序字典：OrderedDict的Key会按照插入的顺序排列
        # from collections import  OrderedDict
        # od = OrderedDict([('a', 1), ('b', 2), ('c', 3)])
        # print(od) # OrderedDict的Key是有序的
        # print(od['a'])
        # for k in od:
        #     print(k)

       # 对于defaultdict(参数) 设置字典的默认value类型，参数必须是可调用类型。即callable(参数)=True
        # md=defaultdict(list) 表示字典md中的value默认为list
        # from collections import defaultdict
        # d1=defaultdict(list)
        # print(d1['k'])  #结果为[],对新创建的d1['k']默认value为list类型
        # d = defaultdict(lambda : 5) #lambda : 5 该lambda函数是无参数的函数，返回值为5
        # print(d['k'])

        
        Counter类的目的是用来跟踪值出现的次数。
        它是一个无序的容器类型，以字典的键值对形式存储，其中元素作为key，其计数作为value。计数值可以是任意的Interger（包括0和负数）。
        c = Counter('abcdeabcdabcaba')
        print c
        输出：Counter({'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 1})
3.time模块
        # 格式化时间  —— 字符串： 给人看的  time.strftime(格式)
        # 时间戳时间 —— float时间 ： 计算机看的 time.time()
        # 结构化时间 —— 元祖 ：计算用的 time.localtime() time.gmtime()

        # 时间戳时间 返回以秒为单位的浮点数 现在时间-1970年1月1日 000000
        # t = time.time() #返回当前的时间戳,
        # print(t)

        # 结构化时间
        # struct_time = time.localtime()
        # print(struct_time)
        #结果time.struct_time(tm_year=2019, tm_mon=2, tm_mday=20, tm_hour=22, tm_min=34, tm_sec=38, tm_wday=2, tm_yday=51, tm_isdst=0)
        # print(struct_time.tm_year) 2019

        # 格式化时间
        # strftime string format time
        # print(time.strftime("%Y-%m-%d %a %H:%M:%S"))  #year month day HOUR MINUTE SECOND 2019-02-20 Wed 22:24:06
        # print(time.strftime("%y-%m-%d %a %H:%M:%S")) #19-02-20 Wed 22:24:28
        # print(time.strftime("%Y/%m/%d %H:%M:%S"))  #year month day HOUR MINUTE SECOND 2019/02/20 22:25:34
        # print(time.strftime("%m-%d %H:%M:%S"))  #year month day HOUR MINUTE SECOND
        # print(time.strftime("%H:%M:%S"))  #year month day HOUR MINUTE SECOND
        # print(time.strftime("%H:%M"))  #year month day HOUR MINUTE SECOND


        # 三个时间之间的相互转换：
        # 时间戳时间与格式化时间之间不能相互转换，必须通过结构化为中介进行转换
        import time
        # 时间戳和结构化时间之间的相互转换
        # 时间戳转换成结构化时间（localtime()本地时间 gmtime() 格林时间）
        # t = time.time() #返回当前的时间戳
        # print(t)
        # print(time.localtime(3000000000))
        # print(time.gmtime(t))
        # 结构化时间转换成时间戳(mktime())
        # print(time.mktime(time.localtime()))

        # 格式化时间与结构化时间之间的相互转化
        # 格式化时间转成结构化时间(strptime(格式化时间，格式化时间的格式))
        # print(time.strptime('2000-12.31','%Y-%m.%d'))
        # 结构化时间转换成格式化时间(strftime(格式化时间的格式，结构化时间))
        # print(time.strftime('%m/%d/%Y %H:%M:%S',time.localtime(3000000000)))

4.random模块
        >>> import random
        #随机小数
        >>> random.random()      # 大于0且小于1之间的小数
        0.7664338663654585
        >>> random.uniform(1,3) #大于1小于3的小数
        1.6270147180533838
        #恒富：发红包

        #随机整数
        >>> random.randint(1,5)  # 大于等于1且小于等于5之间的整数
        >>> random.randrange(1,10,2) # 大于等于1且小于10之间的奇数

        #随机选择一个返回
        >>> random.choice([1,'23',[4,5]])  # #1或者23或者[4,5]
        #随机选择多个返回，返回的个数为函数的第二个参数
        >>> random.sample([1,'23',[4,5]],2) # #列表元素任意2个组合
        [[4, 5], '23']


        #打乱列表顺序
        >>> item=[1,3,5,7,9]
        >>> random.shuffle(item) # 打乱次序
        >>> item
        [5, 1, 3, 7, 9]
        >>> random.shuffle(item)
        >>> item
        [5, 9, 7, 1, 3]
