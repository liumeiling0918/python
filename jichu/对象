# 类名.__dict__ 查看类的所有属性，返回的是一个字典
# 不可通过类名.__dict__ [key]=value 修改某个属性，即使该属性是静态属性
# 只能通过类名.静态属性=新值
#
# 对象.__dict__ 查看对象的所有属性，返回的是一个字典
# 可以通过对象.__dict__ [key]=value 修改某个对象属性
# 例如：
# class Course:
#     language = 'Chinese'
#     def __init__(self,teacher,course_name,period,price):
#         self.teacher = teacher
#         self.name = course_name
#         self.period = period
#         self.price = price
#     def func(self):
#         pass
# Course.__dict__['language'] = 'English' #报错
# print(Course.language)

# python = Course('egon', 'python', '6 months', 20000)
# linux = Course('oldboy', 'linux', '6 months', 20000)
# python.__dict__['language']='English'
# print(python.language)  English
# print(linux.language)   Chinese

# 类中的静态变量 可以被对象和类调用
    # 对于静态变量是不可变数据类型来说(string等)，
        # 类名.类变量=新值 该修改是共享的
        #对象.类变量=新值  该修改是该对象独有的；对于其他对象来说，该类变量仍然是旧值

    # 对于可变数据类型来说，使用对象名的修改是共享的，重新赋值是独立的
# 例如： # 对于静态变量是不可变数据类型来说(string等)，
# class Course:
#     language = 'Chinese'
#     def __init__(self,teacher,course_name,period,price):
#         self.teacher = teacher
#         self.name = course_name
#         self.period = period
#         self.price = price
#     def func(self):
#         pass
#
# python = Course('egon', 'python', '6 months', 20000)
# linux = Course('oldboy', 'linux', '6 months', 20000)
# python.language='English'
# print(python.language)  #English
# print(linux.language)   #Chinese

# 对于可变数据类型来说，使用对象名的修改是共享的，重新赋值是独立的
# class Course:
#     language = ['Chinese']
#     def __init__(self,teacher,course_name,period,price):
#         self.teacher = teacher
#         self.name = course_name
#         self.period = period
#         self.price = price
#     def func(self):
#         pass
#
# python = Course('egon','python','6 months',20000)
# linux = Course('oldboy','linux','6 months',20000)
# python.language[0]='English'  #这是修改操作 原来的language[0]='chinese' 现在的language[0]='English'
# print(linux.language) #['English']
# print(python.language) #['English']
#
# python.language='chinese'  #这是重新赋值操作，会创建新的属性language
# print(linux.language) #['English']
# print(python.language) #chinese

# 例子：
# 创建一个类，每实例化一个对象就计数
# 最终所有的对象共享这个数据
# class Foo:
#     count = 0
#     def __init__(self):
#         Foo.count += 1
#
# f1 = Foo()
# f2 = Foo()
# print(f1.count) 2
# print(f2.count) 2
# f3 = Foo()
# print(f1.count) 3

# 组合：一个类的对象是另外一个类对象的属性
# 例如：
# class A:
#     def __init__(self):
#         self.name = 'egon'
#
# class B:
#     def __init__(self,year,month,day):
#         self.year = year
#         self.month = month
#         self.day = day
#
# b = B(18,1,17)
# a = A()
# a.birth = b #组合
# print(a.birth) #<__main__.B object at 0x0352CDF0>
# print(a.name) #egon
# print(a.birth.day) #17

# 继承 子类没有构造函数时，默认使用父类的构造函数
# 例如：
#     class Animal:
#         def __init__(self,name,aggr,hp):
#             self.name = name
#             self.aggr = aggr
#             self.hp = hp
#             self.func()
#         def func(self):
#             print(123)
#     #
#     class Dog(Animal):
#         def func(self):
#             print(456)
#         def bite(self,person):
#             person.hp -= self.aggr
#
#     # d = Dog()  报错
#     d=Dog('jid',3,4) #结果为456 因为func函数在子类中被重写



# 父类中没有的属性 在子类中出现 叫做派生属性
# 父类中没有的方法 在子类中出现 叫做派生方法
# 只要是子类的对象调用，子类中有的名字 一定用子类的，子类中没有才找父类的，如果父类也没有报错
# 如果父类 子类都有 用子类的(覆盖)
    # 如果还想用父类的，单独调用父类的:
    #       父类名.方法名 需要自己传self参数
    #       super().方法名 不需要自己传self 
    #super是根据mro广度优先顺序找上一个类
#例如# 派生
# class Animal:
#     def __init__(self,name,aggr,hp):
#         self.name = name
#         self.aggr = aggr
#         self.hp = hp
#
#     def eat(self):
#         print('吃药回血')
#         self.hp+=100
#
# class Dog(Animal):
#     def __init__(self,name,aggr,hp,kind):
#         Animal.__init__(self,name,aggr,hp)  #等价于super().__init__(name,aggr,hp)
#         self.kind = kind       # 派生属性
#     def eat(self):
#         Animal.eat(self)   # 如果既想实现新的功能也想使用父类原本的功能，还需要在子类中再调用父类
#         self.teeth = 2
#     def bite(self,person):   # 派生方法
#         person.hp -= self.aggr
# #
# jin = Dog('金老板',100,500,'吉娃娃')
# jin.eat() #吃药回血
# print(jin.hp) #600
# print(jin.teeth) #2
#例如：
    # class Animal:
    #     def __init__(self,name,aggr,hp):
    #         self.name = name
    #         self.aggr = aggr
    #         self.hp = hp
    #     def eat(self):
    #         print('吃药回血')
    #         self.hp+=100
    #
    # class Dog(Animal):
    #     def __init__(self,name,aggr,hp,kind):
    #         super().__init__(name,aggr,hp)  # 只在新式类中有，python3中所有类都是新式类
    #         # super(子类，对象).__init__(name,aggr,hp)  即super(Dog，self).__init__(name,aggr,hp)(可忽略)
    #         # 等同于Animal.__init__(self,name,aggr,hp)
    #         self.kind = kind       # 派生属性
    #     def eat(self):
    #         # super().eat() #吃药回血
    #         print('dog eating')
    #
    # jin = Dog('金老板',200,500,'teddy')
    # print(jin.name) #金老板
    # jin.eat() #dog eating
    # super(Dog,jin).eat() #吃药回血

接口类与抽象类
接口类 metaclass=ABCMeta       抽象方法 @abstractmethod 支持多继承，接口类中的所有的方法都必须不能实现
抽象类 metaclass=abc.ABCMeta   抽象方法 @abc.abstractmethod  不支持多继承，抽象类中方法可以有一些代码的实现
例如接口类：
        from abc import abstractmethod,ABCMeta
        class Payment(metaclass=ABCMeta):  # 元类
            # metaclass 指定元类 默认的元类 type
            # 指定metaclass=ABCMeta 表示将要写的类是一个规范类
            @abstractmethod
            def pay(self,money):pass   # 没有实现这个方法

        class Wechat(Payment):
            def pay(self,money): #必须实现接口类中的抽象方法
                print('已经用微信支付了%s元'%money)

        class Alipay(Payment):
            def pay(self,money):
                print('已经用支付宝支付了%s元' % money)

        class Applepay(Payment):
            def pay(self,money):
                print('已经用applepay支付了%s元' % money)
        
例如接口的多继承
        from abc import abstractmethod,ABCMeta
        class Swim_Animal(metaclass=ABCMeta):
            @abstractmethod
            def swim(self):
                print('hrll')
                pass

        class Walk_Animal(metaclass=ABCMeta):
            @abstractmethod
            def walk(self):pass

        class Fly_Animal(metaclass=ABCMeta):
            @abstractmethod
            def fly(self):pass

        class Tiger(Walk_Animal,Swim_Animal):
            def walk(self):
                pass
            def swim(self):
                pass
        class OldYing(Fly_Animal,Walk_Animal):pass
        class Swan(Swim_Animal,Walk_Animal,Fly_Animal):pass
        
例如抽象类：
        class All_file(metaclass=abc.ABCMeta):
            all_type='file'
            @abc.abstractmethod #定义抽象方法，无需实现功能
            def read(self):
                '子类必须定义读功能'
                with open('filaname') as f:
                    pass

            @abc.abstractmethod #定义抽象方法，无需实现功能
            def write(self):
                '子类必须定义写功能'
                pass

        class Txt(All_file): #子类继承抽象类，但是必须定义read和write方法
            def read(self):
                print('文本数据的读取方法')
            def write(self):
                print('文本数据的读取方法')

        class Sata(All_file): #子类继承抽象类，但是必须定义read和write方法
            def read(self):
                print('硬盘数据的读取方法')

            def write(self):
                print('硬盘数据的读取方法')
                
多态：父类引用指向子类对象
# 什么是多态
# python 动态强类型的语言
# 鸭子类型:不崇尚根据继承所得来的相似;如果两个类刚好相似，并不产生父类的子类的兄弟关系，而是鸭子类型.
# 例如list tuple 这种相似，是自己写代码的时候约束的，而不是通过父类约束的
        class List():
            def __len__(self):pass
        class Tuple():
            def __len__(self):pass
        # 例如list和tuple相似，但是它们不是兄弟关系。通过len()函数可以求list,tuple的长度（鸭子类型，）
        #在java中必须把list,tuple转换成同一个父类或者接口，才能通过len()同时对list,tuple进行操作(多态)
        #所以java是强类型语言（多态），python是动态强类型语言（鸭子类型）
        def len(obj):
            return obj.__len__()
            
封装：# 狭义上的封装 —— 面向对象的三大特性之一
     # 属性 和 方法都藏起来 不让你看见
     # 所有的私有都是在变量的左边加上双下划綫
    # 对象的私有属性
    # 类中的私有方法
    # 类中的静态私有属性
    # 所有的私有的 都不能在类的外部直接使用
    # 在类的外部使用私有：对象._类名__属性名
    # 在类的内部使用私有：对象.__属性名（#会自动的带上_类名）
    # 最好不要在类的外部使用私有
    class Person:
    __key = 123  # 私有静态属性
    def __init__(self,name,passwd):
        self.name = name
        self.__passwd = passwd   # 私有属性

    def __get_pwd(self):         # 私有方法
        return self.__passwd

    def login(self):          # 正常的方法调用私有的方法
        self.__get_pwd()

    alex = Person('alex','alex3714')
    # print(alex.__passwd) 报错
    print(alex._Person__passwd)  #'alex3714' # _类名__属性名
    # print(alex.get_pwd()) 报错
    print(alex._Person__get_pwd()) #'alex3714'
    
    #父类的私有属性不能被子类调用
    # 例如：
    # class Foo:
    #     __key = '123'
    #
    # class Son(Foo):
    #     print(Foo.__key)   报错
    
 # property 内置装饰器函数 只在面向对象中使用
 # 将方法装饰成类的属性，通过调用属性的方式调用:对象.属性
 #被装饰的函数不能有其他的参数，且装饰后得到的属性不可通过对象.属性=newvalue更改
    # 例如
    # from math import pi
    # class Circle:
    #     def __init__(self,r):
    #         self.r = r
    #     @property  #将周长装饰成属性，通过对象.perimeter调用
    #     def perimeter(self):
    #         return 2*pi*self.r
    #     @property
    #     def area(self):
    #         return self.r**2*pi
    #
    # c1 = Circle(5)
    # print(c1.area)     # 圆的面积 78.53981633974483
    # print(c1.perimeter) # 圆的周长 31.41592653589793
    # c1.r=4
    # c1.perimeter=5  #报错 装饰后得到的属性不可通过对象.属性=newvalue更改

 # @property 不能含有额外的函数，且装饰后得到的属性不可通过对象.属性=newvalue更改
    # class Person:
    #     def __init__(self,name):
    #         self.__name = name
    #     @property
    #     def name(self):
    #         return self.__name + 'sb'
    # tiger = Person('泰哥')
    # print(tiger.name) #泰哥sb
    # tiger.name='33' #报错


 # 在@property 后面加上@函数名.setter 便可以通过对象.属性=新值 修改装饰后得到的属性
    # 例如：
    # class Person:
    #     def __init__(self,name):
    #         self.__name = name
    #     @property
    #     def name1(self):
    #         return self.__name + 'sb'
    #     @name1.setter
    #     def name1(self,new_name):
    #         self.__name = new_name
    #
    # tiger = Person('泰哥')
    # print(tiger.name1) #调用的是@property修饰的函数  泰哥sb
    # tiger.name1 = '全班' #调用的是@setter修饰的函数 
    # print(tiger.name1) #调用的是@property修饰的函数 全班sb
    
    # from math import pi
    # class Circle:
    #     def __init__(self,r):
    #         self.r=r
    #     @property
    #     def perimeter(self):
    #         return 2*pi*self.r
    #     @perimeter.setter
    #     def perimeter(self,newp):
    #         self.r=newp
    #     @perimeter.deleter
    #     def perimeter(self):
    #         del self.r
    #         print('haha delete')
    # c1=Circle(4)
    # print(c1.perimeter) #调用的是@property修饰的函数 结果为25
    # c1.perimeter=3  #调用的是@setter修饰的函数
    # print(c1.perimeter) #调用的是@property修饰的函数 结果为18
    # del c1.perimeter #haha delete


 # 属性 查看@property 修改@函数名.setter  删除@函数名.deleter
    # class Person:
    #     def __init__(self,name):
    #         self.__name = name
    #         self.price = 20
    #     @property
    #     def name(self):
    #         return self.__name
    #     @name.deleter
    #     def name(self):
    #         del self.__name
    #     @name.setter
    #     def name(self,new_name):
    #         self.__name = new_name
    #
    # brother2 = Person('二哥')
    # print(brother2.name) （调用@property装饰的函数）
    # del brother2.name  #（调用@name.deleter装饰的函数）
    # print(brother2.name) #报错 因为已经被删除

    # class Person:
    #     def __init__(self,name):
    #         self.__name = name
    #         self.price = 20
    #     @property
    #     def name(self):
    #         return self.__name
    #     @name.deleter
    #     def name(self):
    #         print('nihao')
    #     @name.setter
    #     def name(self,new_name):
    #         self.__name = new_name
    # brother2 = Person('二哥')
    # print(brother2.name)
    # del brother2.name #（调用@name.deleter装饰的方法）
    # print(brother2.name) #结果 nihao 二哥

# staticmathod  静态的方法 ***
# classmethod   类方法    ****
# 类的操作行为
# 例如：# classmethod类方法：# 当这个方法的操作只涉及静态属性的时候 就应该使用classmethod来装饰这个方法
    class Goods:
        __discount = 0.8
        def __init__(self,name,price):
            self.name = name
            self.__price = price
        @property
        def price(self):
            return self.__price * Goods.__discount
        @classmethod   # 把一个方法 变成一个类中的方法，这个方法就直接可以被类调用，不需要依托任何对象
        def change_discount(cls,new_discount):  # self代表对象 cls代表本类
            cls.__discount = new_discount

    apple = Goods('苹果',5)
    print(apple.price) #结果为4.0
    Goods.change_discount(0.5)
    print(apple.price)  #结果为2.5


# staticmethod 静态方法
# 在完全面向对象的程序中，如果一个函数 既和对象没有关系也和类没有关系
# 只是在面向对象语言中，该函数必须放在某个类中，那么就用staticmethod将这个函数变成一个静态方法
# 通过类名.静态方法调用
# python是面向对象和面向函数编程
    class Login:
        def __init__(self,name,password):
            self.name = name
            self.pwd = password
        def login(self):pass

        @staticmethod  #与对象，类均没有关系 只是在面向对象语言中，该函数必须放在某个类中，所以用static修饰
        def get_usr_pwd():   # 静态方法
            usr = input('用户名 ：')
            pwd = input('密码 ：')
            Login(usr,pwd)

        Login.get_usr_pwd()
        
 # 通过反射 (可以通过字符串对类和对象进行操作)
# 通过对象名获取对象属性和普通方法
# 通过类名获取静态属性和类方法和静态方法

# 普通方法self 静态方法@staticmethod 类方法@classmethod 属性方法@property

    class Teacher:
        dic = {'查看学生信息':'show_student','查看讲师信息':'show_teacher'}
        def __init__(self,name):
            self.name=name
        def show_student(self):
            print('show_student')

        def show_teacher(self):
            print('show_teacher')

        @classmethod  #类方法
        def func(cls):
            print('hahaha')


    # hasattr getattr delattr
    # 通过类名获取静态属性
    # print(Teacher.dic) #结果为{'查看学生信息': 'show_student', '查看讲师信息': 'show_teacher'}
    # # 利用反射
    # ret=getattr(Teacher,'dic') #相当于Teacher.dic
    # print(ret) #结果为{'查看学生信息': 'show_student', '查看讲师信息': 'show_teacher'}

    # 通过类名操作类方法
    # Teacher.func() #结果为hahaha
    # 利用反射
    # ret2=getattr(Teacher,'func')
    # ret2()  #结果为hahaha

    # 通过对象名获取对象属性
    # alex=Teacher('al')
    # print(alex.name) #结果为a1
    # # 通过反射
    # ret=getattr(alex,'name')
    # print(ret) #结果为a1

    # 通过对象名操作方法
    # alex = Teacher('al')
    # alex.show_student()  #'show_student'
    # 利用反射
    # f = getattr(alex,'show_student')
    # f()  #结果为'show_student'

    # class A:pass
    # class B(A):pass
    # a = A()
    # print(isinstance(a,A)) 判断是否是某个类的对象
    # print(issubclass(B,A)) 判断B是否是A的子类 True issubclass(子类，父类)
    # print(issubclass(A,B)) #False

    # 反射 ： 是用字符串类型的名字 去操作 变量
    # name = 1
    # eval('print(name)')  # 通过字符串去操作，但是有安全隐患，因为有未知的函数

    # 反射 就没有安全问题
    # 反射 ： 是用字符串类型的名字 去操作 变量，操作的都是内存中存在的函数
    # 反射对象中的属性和方法   # hasattr getattr setattr delattr
    # class A:
    #     def func(self):
    #         print('in func')
    #
    # a = A()
    # a.name = 'alex'
    # a.age = 63
    # # 通过反射得到对象的属性
    # ret = getattr(a,'name')  # 通过字符串取到对象的属性
    # print(ret)
    # 变量名 = input('>>>')
    # if hasattr(a,变量名):
    #     print(getattr(a,变量名))
    # # 通过字符串取到对象的属性的另一种方法，但是该方法不能通过字符串操作对象的方法
    # print(a.__dict__)
    # print(a.__dict__[变量名])
    #
    # # 通过反射操作对象的方法
    # a.func()
    # ret = getattr(a,'func')
    # ret()

    #反射类的属性和方法
    # class A:
    #     price = 20
    #     @classmethod
    #     def func(cls):
    #         print('in func')
    # # 反射类的属性
    # # A.price
    # print(getattr(A,'price'))
    #
    # # 反射类的方法 ：classmethod staticmethod
    # # A.func()
    # if hasattr(A,'func'):
    #     getattr(A,'func')()

    # 反射自定义的模块
    # my模块中的内容
    # day = 'Monday'
    # def wahaha():
    #     print('wahahaha')
    # class C:
    #     pass
    #反射模块的属性
    import my
    # print(my.day)
    # print(getattr(my,'day'))
    # 反射模块的方法
    # getattr(my,'wahaha')()
    # 反射模块中的类
    # getattr(my,'C')反射的是类的地址
    # c=getattr(my,'C')() #可以通过c=getattr(my,'C')()创建对象

    # 反射自己模块中的变量和函数
    # def qqxing():
    #     print('qqxing')
    # year = 2018
    # import sys
    # print(sys.modules['__main__'].year) #2018
    # sys.modules 记录了所有被导入的模块，sys.modules['__main__']是本模块
    # # 反射自己模块中的变量
    # # print(getattr(sys.modules['__main__'],'year'))
    # # 反射自己模块中的函数
    # # getattr(sys.modules['__main__'],'qqxing')()
    # 但是我们一般不用sys.modules['__main__']，因为当本模块被其他模块导入时，sys.modules['__main__']不能找到该模块，而是应该通过该模块的名字寻找
    # 所以我们一般用sys.modules[__name__]
    # 模块中有一个变量__name__ , 例如若在本模块A中，有个变量__name__，
    # 当在本模块A中执行时，该变量为__main__  即__name__=__main__
    # 当我们执行其他模块B时（该模块导入了A模块） ，那么A模块中的__name__='A'
    # 变量名 = input('>>>')
    # print(getattr(sys.modules[__name__],变量名))


    # 内置模块也能用
    # time
    # asctime
    # import time
    # print(getattr(time,'time')())
    # print(getattr(time,'asctime')())



    # 要反射的函数有参数怎么办?
    # print(time.strftime('%Y-%m-%d %H:%M:S'))
    # print(getattr(time,'strftime')('%Y-%m-%d %H:%M:S'))

    # # setattr  设置修改变量
    # class A:
    #     pass
    # a = A()
    # setattr(a,'name','nezha')
    # setattr(A,'name','alex')
    # print(A.name) #alex
    # print(a.name) #nezha
    # #
    # # # delattr 删除一个变量
    # delattr(a,'name')
    # print(a.name) # alex 对象中没有 所以找去类中找
    # delattr(A,'name')
    # print(a.name) #报错
    # setattr  delattr一般不用

内置的类方法和内置函数
    # str(obj) 实际上调用obj.__str__
    # repr(obj)实际上调用obj.__repr__
    # object里有一个__str__，str(对象)一旦被调用，就返回调用这个方法的对象的内存地址
    # 例如：
    # class Teacher:
    #     def __init__(self,name,salary):
    #         self.name = name
    #         self.salary = salary

    # nezha = Teacher('哪吒',250) #结果为<__main__.Teacher object at 0x033E22B0>
    # print(str(nezha))

    # 在自定义的类中可以重写__str__方法：
    # 例如
    # class Teacher:
    #     def __init__(self,name,salary):
    #         self.name = name
    #         self.salary = salary
    #     def __str__(self):
    #         return "Teacher's object :%s"%self.name
    #
    # nezha = Teacher('哪吒',250)
    # print(str(nezha)) #调用重写后的__str__方法 #结果为Teacher's object :哪吒
    # print(nezha)  # 打印一个对象的时候，就是调用nezha.__str__
    # # l = [1,2,3,4,5]   # 实例化 实例化了一个列表类的对象
    # # print(l)   实际上调用的是__str__  结果为[1,2,3,4,5] 列表类重写了__str__方法
    # # %s 和str() 和 print(对象) 实际上都是走的__str__
    #
    # print('%s:%s'%('A',nezha)) #结果为 A:Teacher's object :哪吒
    # #分析：str('A')='A' str(nezha)=Teacher's object :哪吒


    # repr(obj)实际上调用obj.__repr__
    # class Teacher:
    #     def __init__(self,name,salary):
    #         self.name = name
    #         self.salary = salary
    #     def func(self):
    #         return 'wahaha'
    # nezha = Teacher('哪吒',250)
    # print(repr(nezha)) #<__main__.Teacher object at 0x02D2CDF0> 调用父类object的repr方法

    #重写repr方法
    # class Teacher:
    #     def __init__(self,name,salary):
    #         self.name = name
    #         self.salary = salary
    #     def __str__(self): #重写了str(对象)
    #         return "Teacher's object :%s"%self.name
    #     def __repr__(self):
    #         return str(self.__dict__)
    #     def func(self):
    #         return 'wahaha'
    #
    # # %r repr()  实际上都是走的__repr__
    # nezha = Teacher('哪吒',250)
    # print(nezha)  # 打印一个对象的时候，就是调用nezha.__str__
    # print(repr(nezha)) #{'name': '哪吒', 'salary': 250}
    # print('>>> %r'%nezha) #>>> {'name': '哪吒', 'salary': 250}

    #当repr被重写，str没有被重写时，repr()会调用重写后的repr, str()会调用重写后的repr
    #当str被重写，repr没有被重写时，str()会调用重写后的str,repr()不会调用重写后的str()
    # repr 是str的备胎，但str不能做repr的备胎
    #例如 当repr被重写，str没有被重写时
    # class Teacher:
    #     def __init__(self,name,salary):
    #         self.name = name
    #         self.salary = salary
    #     def __repr__(self):
    #         return str(self.__dict__)
    #     def func(self):
    #         return 'wahaha'
    # nezha = Teacher('哪吒',250)
    # print(str(nezha)) #{'name': '哪吒', 'salary': 250}
    # print(repr(nezha))  #{'name': '哪吒', 'salary': 250}

    #例如str被重写，repr没有被重写
    # class Teacher:
    #     def __init__(self,name,salary):
    #         self.name = name
    #         self.salary = salary
    #     def __str__(self): #重写了str(对象)
    #         return "Teacher's object :%s"%self.name
    #     def func(self):
    #         return 'wahaha'
    #
    # nezha = Teacher('哪吒',250)
    # print(str(nezha)) #Teacher's object :哪吒
    # print(repr(nezha))  #<__main__.Teacher object at 0x00B9CDF0>

    #总结 对于str(),如果没有__str__方法，会先找本类中的__repr__方法，再没有再找父类中的__str__。
    # 对于repr(),只会找__repr__,如果没有找父类的
    # 所以在程序中，repr,str只能重写一个时，必定去重写repr
    # print(obj)或者'%s'%obj或者str(obj)的时候，实际上是内部调用了obj.__str__方法，如果str方法有，那么他返回的必定是一个字符串

    # len()调用的是__len__

    #析构函数__del__ python中解释器做了该行为
    #del 先执行了__del__方法，再删除了变量  当变量的引用计数器为0时，解释器自动进行回收
    # class A:
    #     pass
    # a = A()
    # del a        # del先执行了__del__方法，再删除了变量

    # __del__方法可以被重写
    # class A:
    #     def __del__(self):   # 析构函数: 在删除一个对象之前进行一些收尾工作
    #         self.f.close()
    # a = A()
    # a.f = open('my.py')   # 打开文件的步骤：现在在操作系统中打开了一个文件，拿到了文件操作符存在了内存中
    # del a # del先执行了__del__方法，再删除了变量,即先关闭文件(__del__方法)，在内存中删除该文件操作符，再删除变量a

    # __call__方法
    # class A:
    #     def __init__(self,name):
    #         self.name = name
    #     def __call__(self):
    #         '''
    #         打印这个对象中的所有属性
    #         :return:
    #         '''
    #         for k in self.__dict__:
    #             print(k,self.__dict__[k])
    # a = A('alex')
    # a() #name alex
    # # 对象()相当于调用了_call_方法




