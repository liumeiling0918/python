1.模块的导入
  sys.modules记录了所有被导入的模块
  sys.path以列表的形式返回模块的搜索路径
  模块的导入方法：
  第一种：import 模块
          模块.变量名
  第二种:from 模块 import 变量名
         变量名
# 所有的模块导入都应该尽量往上写
    # 内置模块(sys,os等)
    # 扩展模块(Dango)
    # 自定义模块
# 模块不会重复被导入 ： sys.moudles
# 从哪儿导入模块 : sys.path

# import 模块名
    # 模块名.变量名 和本文件中的变量名完全不冲突 (因为是通过模块.变量名调用)
# import 模块名 as 重命名的模块名 ： 使用给模块起别名的方法，可以把多个模块合并成一个大模块，提高代码的兼容性
    # import m1 as newname
    # import m2 as newname

#导入多个模块： import 模块1，模块2

#from import
# from 模块名 import 变量名
    #直接使用 变量名 就可以完成操作
    #如果本文件中有相同的变量名会发生冲突
    
# from 模块名 import 变量名字 as 重命名变量名
# from 模块名 import 变量名1，变量名2
# from 模块名 import *
    # 将模块中的所有变量名都放到内存中
    # 如果本文件中有相同的变量名会发生冲突
    
# from 模块名 import * 和 __all__ 是一对
    # 没有__all__ 这个变量，就会导入所有的名字
    # 如果有all 只导入all列表中的名字(例如被导入模块中有__all__ = ['read','read2'])
    
# __name__  system.modules[__name__]
# 在模块中有一个变量__name__，
# 当我们在本模块中，直接执行这个模块的时候，__name__ == '__main__'
# 当我们执行其他模块，在其他模块中引用这个模块的时候，这个模块中的__name__ == '模块的名字'
2.包的导入
  把解决一类问题的模块放在同一个文件夹里 —— 包
  导入模块时，直接将模块中的函数导入了内存
  导入包时，自动执行了包下面的__init__方法
  
  
  
