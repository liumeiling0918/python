JS
	-JS基础语法
	-BOM(JS操作浏览器)Browser object model 浏览器对象类型
	-DOM(JS操作文档)Document object model 文档对象类型
	
JS基础语法:
	0. JS引入方式
		1. 直接在script标签里面写代码
		<script>
       		 alert('womi')
    		</script>
		2. 在单独的JS文件中写代码,然后通过script标签的src属性引入写好的JS文件
		新建一个js文件，在html中通过<script src="01.js"></script>关联
	1. 变量
		1. var 变量名;   var 变量名 = 值
		2. 变量的命名 字母 数字 下划线和$组成
		3. 推荐使用驼峰

 		// 单行注释
		// 多行注释/*内容*/
		/*变量声明的关键字 var 变量名=value;
		var s1 = "小强";*/
		/*js的变量为动态类型，即变量可以存不同数据类型的值
		例如：
		var n1 = 18;// 数字类型
		var s1 = "小强";// 字符串类型
		console.log("name:", name);//浏览器的console页面打印语句
		alert("我是来自星星的月亮");//网页加载是出现的内容
		var n4 = NaN;  // Not a Number 表示这个值不是数字,代表非数字值的特殊值
		// 字符串拼接就用'+'号
		var s1 = "小强";
		var s2 = '韩涉';
		var s = s1 + s2;
	
	2. 数据类型
		1. 数字   Number 
			1. NaN
			2. parseInt("111")   --> 把字符串转成数字
			3. parseFloat("111") --> 把字符串转成小数
		2. 字符串 String
			1. 字符串的常用方法
		3. 布尔值 Boolean
		
		4.数组  Array
			1. 常用方法
		
		5. null
		6. undefined
		
	
	3. 条件判断
		1. if else
		2. if; else if; else;
		3. switch (值){
		     case 1:
			 console.log(...);
			 break;
			 case 2:
			 ...
			 
			 default:
			 console.log(上面case都不满足就执行这一句);
		   }
	4. 循环
		1. for循环
			for (var i=0;i<值;i++){
			  console.log(i);
			}
		2. while循环
			var i = 5;
			while (i>0){
				console.log(i);
				i--;
			}
	5. 运算符
		1. 算数运算符
			+ - * / % ++ --
		2. 比较运算符
			== != > < >= <= 
			注意!!! 强等于 ===  !==
			
		3. 逻辑运算符
			||(或) &&(与)  !(非)
		
		4. 赋值运算符
			= += -= *= /= 
		
		补充:
			Python的lambda
			
2. 今日内容
	1. 函数
		1. 函数的定义
		2. arguments
			func(11,22)
			
			arguments  --> [11, 22]  arguments[0] arguments[1]
			
		3. 作用域
			1. 函数的调用 要往回找 函数的定义阶段
			2. 首先在函数内部找 -> 内部找不到就往外找,直到找到全局为止
			
		4. 词法分析
			1. 分析(分析的函数内部变量定义过程)
				1. 先看参数
				2. 看有没有局部变量
				3. 看有没有函数定义
			2. 执行(实际执行代码)
3.  内置的对象和方法
	1. 自定义对象
		1. {name: "xiaoqiang", age: 18}
			-键不用加引号,加上也不出错
			-值如果是字符串必须写双引号
		2. new关键字形式
	
	2. 内置的Date对象   --> Python中的内置模块
	
	3. JSON对象 (背会)
		1. 字符串转对象 --> obj = JSON.parse(string)
		2. 对象转字符串 --> s   = JSON.stringify(obj)
		
	4. Math对象
	
	5. RegExp(正则)
		1. 两种定义方式:
			1. new RegExp("^[a-zA-Z][a-zA-Z0-9_]{5,11}$")
			2. /new RegExp("^[a-zA-Z][a-zA-Z0-9_]{5,11}$")/
		2. 匹配模式
			1. g 全局
			2. i 忽略大小写
		3. 坑
			1. 正则表达式中间不能加空格
			2. .test() --> .test(undefined) --> .test("undefined")
			3. 全局模式下会有一个lastIndex属性
    函数：
    // 函数的定义
// function foo(a,b) {
//     console.log("a:", a);
//     console.log("b:", b);
//     return a+b;
// }
// 函数的调用
// var ret1 = foo(11,22,33,44,55); //33
// var ret1 = foo(11); // 11+undefined --> NaN
// console.log("a+b=", ret1);


// 匿名函数
// var sum = function (a, b) {
//     console.log("a:", a);
//     console.log("b:", b);
//     return a+b;
// };
// sum(3,4);

// 立即执行函数
// (function (a,b) {
//     console.log("立即执行函数");
//     console.log(a+b);
//     var sss = "我是函数内部的变量";
// })(11,22);

// console.log(sss);  // 外部访问不到函数内部定义的变量(用立即执行函数防止变量污染全局变量)


// arguments
// function func2(a,b) {
//     console.log("总共有" + arguments.length + "个参数");
//     var ret = 0;
//     for (var i=0;i<arguments.length;i++){
//         ret += arguments[i]
//     }
//     return ret;
// }
//
// console.log(func2(11,22,33));


// JS中的词法分析
/*JS先编译后运行
* 编译时只开辟空间不赋值：
*     若编译时遇到的是属性，则AO.属性=unfined
*     若编译时遇到的是函数，则AO.属性=函数名
* 运行时进行初始化，赋值
* */
// var age = 18;
// function func3(){
//   console.log(age);  // 去AO找age
//   var age = 22;  // AO.age=undefined
//   console.log(age);
// }
//
// func3();  // 问：执行func3()之后的结果是？
// // undefind 22


// var age = 18;
// function foo(){
//   console.log(age);
//   var age = 22;
//   console.log(age);
//   function age(){
//     console.log("呵呵");
//   }
//   console.log(age);
//   age();
// }
// foo();  // 执行后的结果是？
// 1. 先分析 给AO赋值
// var age = 22;  --> AO.age=undefined;
// function age(){console.log("呵呵");}  --> AO.age=function(){...}
// 2. 真正执行阶段 就去AO上找
//// ƒ age(){
//     console.log("呵呵");
//   }
// 22
// 22


// var age = 18;
// function foo(){
//   console.log(age);
//   var age = 22;
//   console.log(age);
//   var age=16;
//   console.log(age);
// }
// foo();  // 执行后的结果是？
// //结果为unfined 22 16

var age = 18;
function foo(){
  console.log(age);
  function age(){
    console.log("呵呵");
  }
}
foo();  // 执行后的结果是？
//结果为：
//ƒ age(){
//     console.log("呵呵");
//   }

var age = 18;
function foo(){
  console.log(age);
  function age(){
    console.log("呵呵");
  }
  var age=18;
  console.log(age)
}
foo();  // 执行后的结果是？
//结果为：
// ƒ age(){
//     console.log("呵呵");
//   }
//18
对象：
// JS中自定义对象

// var person = {name: '小强', age: 38};  // 在JS的对象中,键(属性)默认不用加引号;并且自动把单引号转成双引号
// console.log(person);
// // 单独取对象的属性
// console.log("name:", person.name);
// console.log("age:", person.age);
//
// // 遍历对象的属性
// for (var i in person){
//     console.log(i);
//     console.log(person[i]);
// }

var name="abc"
var person={name:'xiaoqiang',age:38,abc:100}
console.log(person.name); //xiaoqiang
console.log(person[name]); //100 相当于person["abc"]


// Date对象
var d1 = new Date();
console.log(d1);
console.log(typeof d1);
console.log(d1.toLocaleString());  // 转成字符串格式的本地时间
console.log(typeof d1.toLocaleString());

// 生成指定时间的Date对象
// var d2 = new Date("2004/3/20 11:12");
// console.log(d2.toLocaleString());  // 转成字符串格式的本地时间
// console.log(d2.toUTCString());  // 转成字符串格式的UTC时间

var d2 = new Date("2018-3-11 11:12");
console.log(d2.toLocaleString());  // 转成字符串格式的本地时间
console.log(d2.toUTCString());  // 转成字符串格式的UTC时间

console.log(d2.getDate());  // 获取那一天(多少号)
console.log(d2.getDay());  // 获取星期几
console.log(d2.getMonth());  // 获取月份
console.log(d2.getFullYear());  // 获取年
console.log(d2.getHours());  // 获取小时
console.log(d2.getMinutes());  // 获取分钟
console.log(d2.getSeconds());  // 获取秒
console.log(d2.getTime());  // 获取时间戳

// JSON对象
console.log("==============================");

var s = '{"name": "xiaoqiang", "age": 38}';
// 把字符串转换成JS内部的对象
var ret = JSON.parse(s);
console.log(ret);
console.log(typeof ret);
// 把JS内部的对象转换成字符串
var s2 = JSON.stringify(ret);
console.log(s2);
console.log(typeof s2);

//Math对象
var n=-5;
console.log(Math.abs(n))

// RegExp对象 --> Python re模块
// 生产 RegExp对象
var reg1 = new RegExp("^[a-zA-Z][a-zA-Z0-9_]{5,11}$");
var regexpRet1 = reg1.test("xiaoqiang");
console.log(regexpRet1);//true

var regexpRet2 = reg1.test("1xiaoqiang");
console.log(regexpRet2);//false

console.log(/^[a-zA-Z][a-zA-Z0-9_]{5,11}$/.test("xiaoqiang"));//true
console.log(/^[a-zA-Z][a-zA-Z0-9_]{5,11}$/.test("1xiaoqiang"));//false

// 坑1 (正则表达式中间一定不可以有空格)
console.log("============================================");
console.log(/^[a-zA-Z][a-zA-Z0-9_]{5,11}$/.test("xiaoqiang"));
console.log(/^[a-zA-Z][a-zA-Z0-9_]{5,11}$/.test("1xiaoqiang"));

// 坑2
// test()不传值相当于传了一个undefined进去
// 然后test()就把这个undefined当成是"undefined"来判断
console.log("============================================");
console.log(/^[a-zA-Z][a-zA-Z0-9_]{5,11}$/.test("undefined"));//true
console.log(/^[0-9a-zA-Z][a-zA-Z0-9_]{5,11}$/.test());//true
console.log(/^[0-9a-zA-Z][a-zA-Z0-9_]{5,11}$/.test(undefined));//true
console.log(/^[0-9][a-zA-Z0-9_]{5,11}$/.test(undefined));//false
console.log(/^[0-9][a-zA-Z0-9_]{5,11}$/.test("undefined"));//false

// JS正则的两种模式
// 1. g 表示全局
// 2. i 忽略大小写
var ss = "Alexdashabi";
var s3 = ss.replace(/a/gi, "哈哈哈");  // 不是改变默认的字符串,而是生成了一个新的字符串
// 将a或者A替换 哈哈哈lexd哈哈哈sh哈哈哈bi 没有g则
console.log(s3);
console.log(/^[0-9][a-zA-Z]{5,11}$/i.test("undefined"));//忽略大小写

// 坑3
// 当正则表达式使用了全局模式(g)的时候,并且你还让它去检测一个字符串,此时会引出来一个lastIndex
// lastIndex会记住上一次匹配成功的位置,并把下一次要开始校验的位置记住
//
console.log("===============================");
var r = /alex/g;
console.log(r.test("alex"));  // true
console.log(r.lastIndex);  // 4
console.log(r.test("alex"));  // false
console.log(r.lastIndex); //0
console.log(r.test("alex"));  // true
console.log(r.lastIndex);//4
console.log(r.test("alex"));  // false


    
